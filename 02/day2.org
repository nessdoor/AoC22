#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Day 2: Rock paper scissors tournament
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1 (Org mode 9.5.2)
#+cite_export:

[[file:../01/day1.org][As for the first day]], this file is accompanied by the tangled programs, but can
also be executed directly inside Emacs.

This time, the code includes some third-party libraries for making very simple
operations less tedious. Be sure to load or install them beforehand.

* First task
This problem is a simple reduction, with rules encoded in a simple matcher that
is slid across the input list.
#+name: task1
#+begin_src emacs-lisp :tangle task1.el :noweb no-export
  ;;; -*- lexical-binding: t; -*-
  <<library-imports>>
  <<slide-matcher>>
#+end_src

** Reading the input
This time, we begin by reading the input. Last time, we saw that Elisp is not
very ergonomic with file inputs. Let's try using a third-party library, this
time: [[https://github.com/rejeep/f.el][f]].
#+begin_src emacs-lisp :tangle no :noweb-ref library-imports
  (require 'f)
#+end_src
Reading a string from a file is now much more direct:
#+name: read-input
#+begin_src emacs-lisp :tangle no
  ;; Convert input to a list of lines
  (split-string
   (f-read-bytes "input2.txt")
   "\n")
#+end_src

** Encoding moves, rules and scores
#+name: score-table
|   | A     | B     | C     |
|---+-------+-------+-------|
| X | 1 + 3 | 1 + 0 | 1 + 6 |
| Y | 2 + 6 | 2 + 3 | 2 + 0 |
| Z | 3 + 0 | 3 + 6 | 3 + 3 |

For maximum laziness, one can encode all rules and scores in a lookup
table. This leads to 3^{2} combinations, which is quite a small number. The [[score-table][table
above]] shows all combinations with the associated score[fn:1]. The implementation
is trivial, since we have native support for hash tables:
#+begin_src emacs-lisp :tangle no
  ;; Lookup table for round-to-score conversion
  #s(hash-table test equal
                size 9
                data ("A X" 4 "B X" 1 "C X" 7
                      "A Y" 8 "B Y" 5 "C Y" 2
                      "A Z" 3 "B Z" 9 "C Z" 6))
#+end_src

** Reducing moves to scores
Now, we can just reduce the list of strings to the total score:
#+name: slide-matcher
#+begin_src emacs-lisp :tangle no :noweb no-export
  (let ((ht
         <<hash-table-definition>>))
    ;; Sum scores for each round
    (seq-reduce
     (lambda (sum line)
       (+ sum (gethash line ht))) ; Look score up in the table
     <<read-input>>
     0))
#+end_src

** Input sanitation is important
The above code is logically correct but, unfortunately, there is a
showstopper. Try to execute the following code:
#+begin_src emacs-lisp :tangle no :results value pp :exports both
  ;; Drop lines until one of length =/= 3 appears, then return all of them
  (seq-drop-while
   (lambda (l) (= l 3))
   (seq-map
    'length
    (split-string
     (f-read-bytes "input2.txt")
     "\n")))
#+end_src

#+RESULTS:
: (0)

Yes, there is a line of length 0. This is because the input has a closing =\n=,
which produces a =""= string in the list. The laziest (and most efficient) way
to address this issue is by including a mapping for =""= of value 0 in the
lookup table:
#+name: hash-table-definition
#+begin_src emacs-lisp :tangle no
  ;; Lookup table for round-to-score conversion
  #s(hash-table test equal
                size 10
                data ("A X" 4 "B X" 1 "C X" 7
                      "A Y" 8 "B Y" 5 "C Y" 2
                      "A Z" 3 "B Z" 9 "C Z" 6
                      ;; Ignore empty lines
                      "" 0))
#+end_src

Another alternative would be to filter all lines of length 0 with
an s-expression like:
#+begin_src emacs-lisp :tangle no
  (seq-filter (lambda (l) (> l 0)) ...)
#+end_src

* Footnotes

[fn:1] This table can be seen as the summation of a matrix containing the
victory-draw-loss scores and the matrix containing the scores associated with
the rock/paper/scissors choice.
